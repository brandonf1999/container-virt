"""init schema

Revision ID: 59d0a9b8ae86
Revises: 
Create Date: 2025-10-18 13:22:10.108250

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '59d0a9b8ae86'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clusters',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('connection_uri', sa.String(length=1024), nullable=False),
    sa.Column('description', sa.String(length=512), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_clusters')),
    sa.UniqueConstraint('name', name=op.f('uq_clusters_name'))
    )
    op.create_table('hosts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('cluster_id', sa.UUID(), nullable=False),
    sa.Column('libvirt_id', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('ONLINE', 'OFFLINE', 'DEGRADED', name='host_status'), nullable=False),
    sa.Column('facts', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('last_seen', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], name=op.f('fk_hosts_cluster_id_clusters'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_hosts')),
    sa.UniqueConstraint('cluster_id', 'libvirt_id', name='uq_hosts_cluster_libvirt_id')
    )
    op.create_index('ix_hosts_status', 'hosts', ['status'], unique=False)
    op.create_table('domains',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('host_id', sa.UUID(), nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('state', sa.Enum('RUNNING', 'PAUSED', 'SHUTDOWN', 'SHUTOFF', 'CRASHED', 'PMSUSPENDED', 'UNKNOWN', name='domain_state'), nullable=False),
    sa.Column('last_seen', sa.DateTime(timezone=True), nullable=True),
    sa.Column('vcpu_count', sa.Integer(), nullable=True),
    sa.Column('memory_mb', sa.Integer(), nullable=True),
    sa.Column('raw_xml', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['host_id'], ['hosts.id'], name=op.f('fk_domains_host_id_hosts'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_domains')),
    sa.UniqueConstraint('host_id', 'uuid', name='uq_domains_host_uuid')
    )
    op.create_index('ix_domains_state', 'domains', ['state'], unique=False)
    op.create_table('console_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('domain_id', sa.UUID(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.CheckConstraint('expires_at > created_at', name=op.f('ck_console_sessions_ck_console_sessions_expiration_order')),
    sa.ForeignKeyConstraint(['domain_id'], ['domains.id'], name=op.f('fk_console_sessions_domain_id_domains'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_console_sessions')),
    sa.UniqueConstraint('token', name='uq_console_sessions_token')
    )
    op.create_index('ix_console_sessions_active', 'console_sessions', ['token'], unique=True, postgresql_where=sa.text('revoked_at IS NULL'))
    op.create_table('tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED', 'CANCELLED', name='task_status'), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('host_id', sa.UUID(), nullable=True),
    sa.Column('domain_id', sa.UUID(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('finished_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['domain_id'], ['domains.id'], name=op.f('fk_tasks_domain_id_domains'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['host_id'], ['hosts.id'], name=op.f('fk_tasks_host_id_hosts'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tasks'))
    )
    op.create_index('ix_tasks_status', 'tasks', ['status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_tasks_status', table_name='tasks')
    op.drop_table('tasks')
    op.drop_index('ix_console_sessions_active', table_name='console_sessions', postgresql_where=sa.text('revoked_at IS NULL'))
    op.drop_table('console_sessions')
    op.drop_index('ix_domains_state', table_name='domains')
    op.drop_table('domains')
    op.drop_index('ix_hosts_status', table_name='hosts')
    op.drop_table('hosts')
    op.drop_table('clusters')
    # ### end Alembic commands ###

